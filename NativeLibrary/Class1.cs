using System.Runtime.InteropServices;

namespace NativeLibrary;


public class Class1
{
    [UnmanagedCallersOnly(EntryPoint = "aotsample_add")]
    public static int Add(int a, int b)
    {
        return a + b;
    }

    [UnmanagedCallersOnly(EntryPoint = "aotsample_write_line")]
    public static int WriteLine(IntPtr pString)
    {
        // The marshalling code is typically auto-generated by a custom tool in larger projects.
        try
        {
            // UnmanagedCallersOnly methods only accept primitive arguments. The primitive arguments
            // have to be marshalled manually if necessary.
            string str = Marshal.PtrToStringAnsi(pString);

            Console.WriteLine(str);
        }
        catch
        {
            // Exceptions escaping out of UnmanagedCallersOnly methods are treated as unhandled exceptions.
            // The errors have to be marshalled manually if necessary.
            return -1;
        }
        return 0;
    }

    [UnmanagedCallersOnly(EntryPoint = "aotsample_sumstring")]
    public static IntPtr sumstring(IntPtr first, IntPtr second)
    {
        // Parse strings from the passed pointers 
        string my1String = Marshal.PtrToStringAnsi(first);
        string my2String = Marshal.PtrToStringAnsi(second);

        // Concatenate strings 
        string sum = my1String + my2String;

        // Assign pointer of the concatenated string to sumPointer
        IntPtr sumPointer = Marshal.StringToCoTaskMemAnsi(sum);

        // Return pointer
        return sumPointer;
    }

    [UnmanagedCallersOnly(EntryPoint = "aotsample_passArray")]
    public static (IntPtr,int) passArray(IntPtr ptrToArray, int length)
    {
        Marshal.PtrToStructure(ptrToArray, new int[length]);
        int[] array = new int[length];
        IntPtr ptr = Marshal.AllocHGlobal(array.Length * sizeof(int));
        Marshal.Copy(array, 0, ptr, array.Length);
        return (ptr, length);
    }

    [UnmanagedCallersOnly(EntryPoint = "aotsample_passArrayWithGC")]
    public static (IntPtr, int) passArrayWithGC(IntPtr ptrToArray, int length, int trashArrayCount)
    {
        for(int i = 0; i < trashArrayCount;)
        {
            var trashArray = new int[10000]; 
        }
        return (ptrToArray, length);
    }
}
